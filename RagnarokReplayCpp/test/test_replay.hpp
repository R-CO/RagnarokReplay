#ifndef RAGNAROKREPLAY_RAGNAROKREPLAYCPP_TEST_TESTREPLAY_HPP
#define RAGNAROKREPLAY_RAGNAROKREPLAYCPP_TEST_TESTREPLAY_HPP

#include <algorithm>
#include <cstdint>
#include <iostream>
#include <sstream>
#include <vector>

/**
 * Author: R-CO
 * E-mail: daniel1820kobe@gmail.com
 **/
#include "../Replay.hpp"
#include "simple_test.h"

class PublicReplay : public RagnarokReplay::Replay {
 public:
  void ParseHeader(std::istream &input_stream) {
    RagnarokReplay::Replay::ParseHeader(input_stream);
  }
};  // end of class PublicReplay

void Replay_parseHeader() {
  unsigned char header_raw_data[112] = {
      0x3C, 0x3C, 0x20, 0x52, 0x61, 0x67, 0x6E, 0x61, 0x72, 0x6F, 0x6B, 0x20,
      0x52, 0x65, 0x70, 0x6C, 0x61, 0x79, 0x20, 0x46, 0x69, 0x6C, 0x65, 0x20,
      0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 0x30, 0x2E, 0x30, 0x35,
      0x20, 0x3E, 0x3E, 0x0D, 0x0A, 0x20, 0xA1, 0xD8, 0x20, 0x44, 0x6F, 0x20,
      0x6E, 0x6F, 0x74, 0x20, 0x6D, 0x6F, 0x64, 0x69, 0x66, 0x79, 0x20, 0x66,
      0x69, 0x6C, 0x65, 0x21, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
      0x0A, 0x00, 0x00, 0x00, 0x05, 0x47, 0x41, 0x52, 0xE2, 0x07, 0x03, 0x0B,
      0x00, 0x14, 0x3B, 0x12};
  std::stringstream ss;
  ss.write(reinterpret_cast<const char *>(header_raw_data),
           sizeof(header_raw_data));

  PublicReplay replay;
  replay.ParseHeader(ss);

  RagnarokReplay::Replay::Header *const header =
      reinterpret_cast<RagnarokReplay::Replay::Header *const>(header_raw_data);
  EXPECT_EQ(memcmp(&replay.header, header, sizeof(*header)), 0);
}

#endif  // end of define RAGNAROKREPLAY_RAGNAROKREPLAYCPP_TEST_TESTREPLAY_HPP